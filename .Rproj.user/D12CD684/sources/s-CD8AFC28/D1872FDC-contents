#install.packages('jsonlite')
install.packages('magrittr')
install.packages('dplyr')
library('magrittr')
library('dplyr')
library('jsonlite')
library('redux')



# to dataframe
# bitmaps <- as.data.frame(fromJSON(unlist(message)[2]))














confl <- redis_config(url='redis://127.0.0.1:6380/1')
roaring <- redux::hiredis(confl)
s <- redux::hiredis()
p <- redux::hiredis()

tennis_racket <- function(x) {
  p$PUBLISH("result", x)
}

transform <- function(x) {
  data <- fromJSON(x$value)
  print(data)
  #result <- weighted.mean(data$'[12354, "believability"]', data$count)
  #print(result)
  #tennis_racket(result)
  data
}

msg <- s$subscribe("hello",
                       transform = transform,
                       n = 1)

# root_keys to counts
produce_counts <- function(bitmaps) {
  bitmaps_arr <- as.data.frame(bitmaps)

  results <- c()

  for (key in bitmaps_arr$root_key) {
    output <- roaring$command(c("R.BITCOUNT", key))
    results[[key]]  <- output
  }

  as.integer(results)
}

# apply counts to the dataframe
pp <- as.data.frame(msg) %>%
  mutate(counts = produce_counts(msg)) %>%
  select(-root_key)














confl <- redis_config(url='redis://127.0.0.1:6380/1')
roaring <- redux::hiredis(confl)
s <- redux::hiredis()
p <- redux::hiredis()

tennis_racket <- function(x) {
  p$PUBLISH("result", x)
}

transform <- function(x) {
  data <- fromJSON(x$value)
  print(data)
  #result <- weighted.mean(data$'[12354, "believability"]', data$count)
  #print(result)
  #tennis_racket(result)
  data
}

msg <- s$subscribe("hello",
                   transform = transform,
                   n = 1)



# working member counts
to_respondent_level_data <- function(bitmaps) {
  bitmaps_df <- as.data.frame(bitmaps)
  duptimes <- c()
  respondents <- (c)

  for (column_number in 1:nrow(bitmaps_df)) {
    key <- bitmaps_df[column_number, "root_key"]
    indexes <- roaring$command(c("R.GETINTARRAY", key))

    duptimes <- append(duptimes, length(indexes))
    respondents <- append(respondents, as.integer(indexes))
  }


  idx <- rep(1:nrow(bitmaps_df), duptimes)

  dupdf <- bitmaps_df[idx,]
  dupdf$respondent_id <- respondents

  member_counts <- dupdf %>%
    group_by(respondent_id) %>%
    summarise(member_count = n())

  return(member_counts)
}

to_respondent_level_data(msg)










confl <- redis_config(url='redis://127.0.0.1:6380/1')
roaring <- redux::hiredis(confl)
s <- redux::hiredis()
p <- redux::hiredis()

transform <- function(x) {
  data <- fromJSON(x$value)
  print(data)
  result <- toJSON(to_respondent_level_data(data))
  tennis_racket(result)
}

msg <- s$subscribe("hello",
                   transform = transform, n = 1)

tennis_racket <- function(x) {
  p$PUBLISH("need_to_divide", x)
}

# member counts
to_respondent_level_data <- function(bitmaps) {
  bitmaps_df <- as.data.frame(bitmaps)
  duptimes <- c()
  respondents <- c()

  for (column_number in 1:nrow(bitmaps_df)) {
    key <- bitmaps_df[column_number, "root_key"]
    indexes <- roaring$command(c("R.GETINTARRAY", key))

    duptimes <- append(duptimes, length(indexes))
    respondents <- append(respondents, as.integer(indexes))
  }

  idx <- rep(1:nrow(bitmaps_df), duptimes)

  dupdf <- bitmaps_df[idx,]
  dupdf$respondent_id <- respondents

  member_counts <- dupdf %>%
    group_by(respondent_id) %>%
    summarise(member_count = n()) %>%
    group_by(member_count) %>%
    summarize(indexes = paste(sort(unique(respondent_id)),collapse=", ")) %>%
    mutate(root_key = to_bitmaps(indexes, roaring)) %>%
    select(-indexes)

  print(member_counts)
  return(member_counts)
}

a <- to_respondent_level_data(msg)


to_bitmaps <- function(indexes, redis) {
  print(indexes)
  storage_keys <- c()

  for (i in indexes) {
    key <- i
    root_key <- "response_id|msff498fe3|cdsff498fe3|sf7366f35"

    formatted_root_key <- paste(root_key, key, sep="|")
    redis$command(c("R.APPENDINTARRAY", formatted_root_key, as.numeric(strsplit(key,split=", ",fixed=TRUE)[[1]])))

    storage_keys <- append(storage_keys, formatted_root_key)
  }

  return(storage_keys)
}




# works, moved into a package
unique_key <- function() {
  key <- tolower(paste("redis:bitops:", paste(sample(c(0:9, LETTERS[1:10]), 40, T), collapse = ''), sep=""))
  return(key)
}




