install.packages('jsonlite')
install.packages('magrittr')
install.packages('dplyr')
install.packages("RcppMsgPack")
install.packages('tidyverse')

library('magrittr')
library('dplyr')
library('jsonlite')
library('redux')
library('RcppMsgPack')
library('tidyverse')

confl <- redis_config(url='redis://127.0.0.1:6380/1')
roaring <- redux::hiredis(confl)
s <- redux::hiredis()
p <- redux::hiredis()

transform <- function(x) {
  data <- msgpack_unpack(x$value, simplify=T)
  print(data)
  data <- member_count(to_respondent_level_data(data, roaring), roaring)
  print("break")
  print(typeof(data))
  print(data)
  res <- apply(data, 1, as.list)
  print(res)
  res <- msgpack_pack(res)
  print(res)
  tennis_racket(res)
}

tennis_racket <- function(x) {
  p$PUBLISH("need_to_divide", x)
}


# done
to_respondent_level_data <- function(bitmaps, roaring) {
  bitmaps_df <- as.data.frame(bind_rows(bitmaps))
  print("not respondent level data")
  print(bitmaps_df)
  duptimes <- c()
  respondents <- c()

  for (column_number in 1:nrow(bitmaps_df)) {
    key <- bitmaps_df[column_number, "root_key"]
    indexes <- roaring$command(c("R.GETINTARRAY", key))

    duptimes <- append(duptimes, length(indexes))
    respondents <- append(respondents, as.integer(indexes))
  }

  idx <- rep(1:nrow(bitmaps_df), duptimes)

  dupdf <- bitmaps_df[idx,]
  dupdf$respondent_id <- respondents

  print("respondent level data")
  print(dupdf)
  return(dupdf)
}

# done
member_count <- function(respondent_level_bitmaps, roaring) {
  member_counts <- respondent_level_bitmaps %>%
    group_by(respondent_id) %>%
    summarise(member_count = n()) %>%
    group_by(member_count) %>%
    summarize(indexes = paste(sort(unique(respondent_id)),collapse=", ")) %>%
    mutate(root_key = write_indexes_to_redis(indexes, roaring)) %>%
    select(-indexes)

  print('member_counts')
  print(member_counts)
  return(member_counts)
}


# member counts
# to_respondent_level_data <- function(bitmaps) {
#   bitmaps_df <- as.data.frame(bind_rows(bitmaps))
#   print(bitmaps_df)
#   duptimes <- c()
#   respondents <- c()
#
#   for (column_number in 1:nrow(bitmaps_df)) {
#     key <- bitmaps_df[column_number, "root_key"]
#     indexes <- roaring$command(c("R.GETINTARRAY", key))
#
#     duptimes <- append(duptimes, length(indexes))
#     respondents <- append(respondents, as.integer(indexes))
#   }
#
#   idx <- rep(1:nrow(bitmaps_df), duptimes)
#
#   dupdf <- bitmaps_df[idx,]
#   dupdf$respondent_id <- respondents
#
#   member_counts <- dupdf %>%
#     group_by(respondent_id) %>%
#     summarise(member_count = n()) %>%
#     group_by(member_count) %>%
#     summarize(indexes = paste(sort(unique(respondent_id)),collapse=", ")) %>%
#     mutate(root_key = write_indexes_to_redis(indexes, roaring)) %>%
#     select(-indexes)
#
#   print(member_counts)
#   return(member_counts)
# }

# done
write_indexes_to_redis <- function(indexes, roaring) {
  print(indexes)
  storage_keys <- c()

  for (i in indexes) {
    key <- i
    dest_key <- unique_key()

    roaring$command(c("R.APPENDINTARRAY", dest_key, as.numeric(strsplit(key,split=", ",fixed=TRUE)[[1]])))
    storage_keys <- append(storage_keys, dest_key)
  }

  print("storage_keys from written indexes")
  print(typeof(storage_keys))
  print(storage_keys)
  return(storage_keys)
}

# done
unique_key <- function() {
  key <- tolower(paste("redis:bitops:", paste(sample(c(0:9, LETTERS[1:10]), 40, T), collapse = ''), sep=""))
  return(key)
}


msg <- s$subscribe("hello",
                   transform = transform,
                   n = 1)

